name: lago-local

volumes:
  lago_rsa_data:
  lago_postgres_data:
  lago_redis_data:
  lago_storage_data:

x-postgres-image: &postgres-image
  image: postgres:15-alpine
x-redis-image: &redis-image
  image: redis:7-alpine
x-backend-image: &backend-image
  image: getlago/api:v1.27.1
x-frontend-image: &frontend-image
  image: getlago/front:v1.27.1

x-lago-api-url: &lago-api-url
  "LAGO_API_URL": ${LAGO_API_URL:-http://localhost:3000}
x-lago-front-url: &lago-front-url
  "LAGO_FRONT_URL": ${LAGO_FRONT_URL:-http://localhost}

x-backend-environment: &backend-env
  "DATABASE_URL": postgresql://${POSTGRES_USER:-lago}:${POSTGRES_PASSWORD:-changeme}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-lago}?search_path=${POSTGRES_SCHEMA:-public}
  "REDIS_URL": redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
  "REDIS_PASSWORD": ${REDIS_PASSWORD:-}
  "SECRET_KEY_BASE": ${SECRET_KEY_BASE:-your-secret-key-base-hex-64}
  "RAILS_ENV": production
  "RAILS_LOG_TO_STDOUT": ${LAGO_RAILS_STDOUT:-true}
  "LAGO_RSA_PRIVATE_KEY": ${LAGO_RSA_PRIVATE_KEY:-}
  "LAGO_SIDEKIQ_WEB": ${LAGO_SIDEKIQ_WEB:-true}
  "LAGO_ENCRYPTION_PRIMARY_KEY": ${LAGO_ENCRYPTION_PRIMARY_KEY:-your-encryption-primary-key}
  "LAGO_ENCRYPTION_DETERMINISTIC_KEY": ${LAGO_ENCRYPTION_DETERMINISTIC_KEY:-your-encryption-deterministic-key}
  "LAGO_ENCRYPTION_KEY_DERIVATION_SALT": ${LAGO_ENCRYPTION_KEY_DERIVATION_SALT:-your-encryption-derivation-salt}
  "LAGO_USE_AWS_S3": ${LAGO_USE_AWS_S3:-false}
  "LAGO_AWS_S3_ACCESS_KEY_ID": ${LAGO_AWS_S3_ACCESS_KEY_ID:-azerty123456}
  "LAGO_AWS_S3_SECRET_ACCESS_KEY": ${LAGO_AWS_S3_SECRET_ACCESS_KEY:-azerty123456}
  "LAGO_AWS_S3_REGION": ${LAGO_AWS_S3_REGION:-us-east-1}
  "LAGO_AWS_S3_BUCKET": ${LAGO_AWS_S3_BUCKET:-bucket}
  "LAGO_AWS_S3_ENDPOINT": ${LAGO_AWS_S3_ENDPOINT:-}
  "LAGO_USE_GCS": ${LAGO_USE_GCS:-false}
  "LAGO_GCS_PROJECT": ${LAGO_GCS_PROJECT:-}
  "LAGO_GCS_BUCKET": ${LAGO_GCS_BUCKET:-}
  "LAGO_FROM_EMAIL": ${LAGO_FROM_EMAIL:-}
  "LAGO_SMTP_ADDRESS": ${LAGO_SMTP_ADDRESS:-}
  "LAGO_SMTP_PORT": ${LAGO_SMTP_PORT:-587}
  "LAGO_SMTP_USERNAME": ${LAGO_SMTP_USERNAME:-}
  "LAGO_SMTP_PASSWORD": ${LAGO_SMTP_PASSWORD:-}
  "LAGO_PDF_URL": ${LAGO_PDF_URL:-http://pdf:3000}
  "LAGO_REDIS_CACHE_URL": redis://${LAGO_REDIS_CACHE_HOST:-redis}:${LAGO_REDIS_CACHE_PORT:-6379}
  "LAGO_REDIS_CACHE_PASSWORD": ${LAGO_REDIS_CACHE_PASSWORD:-}
  "LAGO_DISABLE_SEGMENT": ${LAGO_DISABLE_SEGMENT:-}
  "LAGO_DISABLE_WALLET_REFRESH": ${LAGO_DISABLE_WALLET_REFRESH:-}
  "LAGO_DISABLE_SIGNUP": ${LAGO_DISABLE_SIGNUP:-false}
  "LAGO_OAUTH_PROXY_URL": https://proxy.getlago.com
  "LAGO_LICENSE": ${LAGO_LICENSE:-}
  "LAGO_CREATE_ORG": ${LAGO_CREATE_ORG:-false}
  "LAGO_ORG_USER_PASSWORD": ${LAGO_ORG_USER_PASSWORD:-}
  "LAGO_ORG_USER_EMAIL": ${LAGO_ORG_USER_EMAIL:-}
  "LAGO_ORG_NAME": ${LAGO_ORG_NAME:-}
  "LAGO_ORG_API_KEY": ${LAGO_ORG_API_KEY:-}
  "GOOGLE_AUTH_CLIENT_ID": ${GOOGLE_AUTH_CLIENT_ID:-}
  "GOOGLE_AUTH_CLIENT_SECRET": ${GOOGLE_AUTH_CLIENT_SECRET:-}
x-frontend-environment: &frontend-env
  "API_URL": ${LAGO_API_URL:-http://localhost:3000}
  "APP_ENV": production
  "LAGO_OAUTH_PROXY_URL": https://proxy.getlago.com

services:
  db:
    <<: *postgres-image
    container_name: lago-db
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-lago} -d ${POSTGRES_DB:-lago} -h localhost -p ${POSTGRES_PORT:-5432}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lago}
      POSTGRES_USER: ${POSTGRES_USER:-lago}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
      PGPORT: ${POSTGRES_PORT:-5432}
      POSTGRES_SCHEMA: public
    volumes:
      - lago_postgres_data:/data/postgres
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    profiles:
      - all
      - all-no-redis
      - all-no-keys

  redis:
    <<: *redis-image
    container_name: lago-redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: --port ${REDIS_PORT:-6379}
    volumes:
      - lago_redis_data:/data
    ports:
      - ${REDIS_PORT:-6379}:${REDIS_PORT:-6379}
    profiles:
      - all
      - all-no-pg
      - all-no-keys

  rsa-keys:
    <<: *backend-image
    container_name: lago-rsa-keys
    command: ["./scripts/generate.rsa.sh"]
    volumes:
      - lago_rsa_data:/app/config/keys
    profiles:
      - all
      - all-no-pg
      - all-no-redis
      - all-no-db

  migrate:
    <<: *backend-image
    container_name: lago-migrate
    restart: no
    depends_on:
      db:
        condition: service_healthy
        restart: true
        required: false
    command: ["./scripts/migrate.sh"]
    volumes:
      - lago_rsa_data:/app/config/keys
    environment:
      <<: *backend-env

  api:
    <<: *backend-image
    container_name: lago-api
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
        restart: true
        required: false
      redis:
        condition: service_healthy
        restart: true
        required: false
    command: ["./scripts/start.api.sh"]
    healthcheck:
      test: curl -f http://localhost:3000/health || exit 1
      interval: 10s
      start_period: 30s
      timeout: 60s
      start_interval: 2s
    environment:
      <<: [*backend-env, *lago-api-url, *lago-front-url]
    volumes:
      - lago_storage_data:/app/storage
      - lago_rsa_data:/app/config/keys
    ports:
      - ${API_PORT:-3000}:3000

  front:
    <<: *frontend-image
    container_name: lago-front
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
        restart: true
    environment:
      <<: [*frontend-env, *lago-api-url, *lago-front-url]
    ports:
      - ${FRONT_PORT:-80}:80

  api-worker:
    <<: *backend-image
    container_name: lago-worker
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
        restart: true
        required: false
      redis:
        condition: service_healthy
        restart: true
        required: false
    command: ["./scripts/start.worker.sh"]
    healthcheck:
      test: curl -f http://localhost:8080 || exit 1
      interval: 10s
      start_period: 30s
      timeout: 60s
      start_interval: 2s
    environment:
      <<: [*backend-env, *lago-api-url]
    volumes:
      - lago_storage_data:/app/storage
      - lago_rsa_data:/app/config/keys

  api-clock:
    <<: *backend-image
    container_name: lago-clock
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
        restart: true
        required: false
      redis:
        condition: service_healthy
        restart: true
        required: false
    command: ["./scripts/start.clock.sh"]
    volumes:
      - lago_rsa_data:/app/config/keys
    environment:
      <<: [*backend-env, *lago-api-url]

  pdf:
    image: getlago/lago-gotenberg:8.15
    command:
      - gotenberg
      - --libreoffice-disable-routes=true
      - --chromium-ignore-certificate-errors=true
      - --chromium-disable-javascript=true
      - --api-timeout=300s
