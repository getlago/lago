name: "Release Single Docker Image"
on:
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      version:
        description: Version
        required: true
env:
  REGISTRY_IMAGE: getlago/lago
jobs:
  build-single-docker-image:
    strategy:
      matrix:
        platform:
          - version: linux/amd64
            runner: linux/amd64
          - version: linux/arm64
            runner: linux-arm64
    name: Build ${{ matrix.platform.version }} Image
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform.version }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ github.event_name == 'release' && github.event.release.tag_name || github.event.inputs.version }}
            type=raw,value=latest
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      - name: Log In to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Add version into docker image
        id: add_version
        run: |
          echo "${{ github.event_name == 'release' && github.event.release.tag_name || github.event.inputs.version }}" > LAGO_VERSION
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: ${{ matrix.platform.version }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            SEGMENT_WRITE_KEY=${{ secrets.SEGMENT_WRITE_KEY }}
      - name: Export Digest
        run: |
          mkdir -p ./_tmp/${{ github.run_id }}/${{ github.run_attempt }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "./_tmp/${{ github.run_id }}/${{ github.run_attempt }}/digests/${digest#sha256:}"
      - name: Upload Digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ./_tmp/${{ github.run_id }}/${{ github.run_attempt }}/digests/*
          if-no-files-found: error
          retention-days: 1
      - name: Clean up
        if: always()
        run: |
          [ -e ./_tmp/${{ github.run_id }}/${{ github.run_attempt }}/digests ] && \
          rm -rf ./_tmp/${{ github.run_id }}/${{ github.run_attempt }}/digests
  merge:
    name: Merge Images
    runs-on: lago-runner
    needs: [build-single-docker-image]
    steps:
      - name: Download Digests
        uses: actions/download-artifact@v4
        with:
          path: ./_tmp/${{ github.run_id}}/${{ github.run_attempt }}/digests
          pattern: digests-*
          merge-multiple: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ github.event_name == 'release' && github.event.release.tag_name || github.event.inputs.version }}
            type=raw,value=latest
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Create manifest and push
        working-directory: ./_tmp/${{ github.run_id }}/${{ github.run_attempt}}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect Image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
      - name: Clean up
        if: always()
        run: |
          [ -e ./_tmp/${{ github.run_id }}/${{ github.run_attempt }}/digests ] && \
          rm -rf ./_tmp/${{ github.run_id }}/${{ github.run_attempt }}/digests
